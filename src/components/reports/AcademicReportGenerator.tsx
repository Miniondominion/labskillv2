import { useState } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { FileText, Download, Filter, Settings, Save, Upload, Printer } from 'lucide-react';
import { Card } from '../shared/Card';
import { Button } from '../shared/Button';
import { Select } from '../shared/Select';
import { FormField } from '../shared/FormField';
import { Modal } from '../shared/Modal';
import { StatusMessage } from '../shared/StatusMessage';
import { jsPDF } from 'jspdf';
import * as XLSX from 'xlsx';

type ReportTemplate = {
  id: string;
  name: string;
  config: {
    dataPoints: string[];
    dateRange: string;
    cohort: string;
    submissionTypes: string[];
    evaluationCriteria: string[];
    questions: string[];
    weights: Record<string, number>;
  };
};

type ReportConfig = ReportTemplate['config'];

export function AcademicReportGenerator() {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [showTemplateModal, setShowTemplateModal] = useState(false);
  const [showConfigModal, setShowConfigModal] = useState(false);
  const [templates, setTemplates] = useState<ReportTemplate[]>([]);
  const [selectedTemplate, setSelectedTemplate] = useState<string>('');
  const [config, setConfig] = useState<ReportConfig>({
    dataPoints: [],
    dateRange: 'all',
    cohort: 'all',
    submissionTypes: [],
    evaluationCriteria: [],
    questions: [],
    weights: {}
  });

  const handleGenerateReport = async () => {
    try {
      setLoading(true);
      setError(null);

      // Fetch data based on config
      const response = await fetch(
        `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/academic-report`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ config })
        }
      );

      if (!response.ok) throw new Error('Failed to generate report');
      const data = await response.json();

      // Generate PDF report
      const doc = new jsPDF();
      
      // Add header
      doc.setFontSize(20);
      doc.text('Academic Progress Report', 20, 20);
      
      // Add metadata
      doc.setFontSize(12);
      doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 30);
      doc.text(`Generated By: ${user?.email}`, 20, 40);

      // Add content sections
      let yPos = 60;

      // Student Info
      doc.setFontSize(16);
      doc.text('Student Information', 20, yPos);
      yPos += 10;

      // Performance Summary
      doc.setFontSize(16);
      doc.text('Performance Summary', 20, yPos);
      yPos += 10;

      // Add submission counts if selected
      if (config.dataPoints.includes('submission_count')) {
        doc.text('Form Submission Counts', 20, yPos);
        yPos += 10;
        
        if (data.metrics?.submissionsByType) {
          Object.entries(data.metrics.submissionsByType).forEach(([type, count]) => {
            doc.text(`${type}: ${count}`, 30, yPos);
            yPos += 10;
          });
        }
      }

      // Detailed Analysis
      doc.setFontSize(16);
      doc.text('Detailed Analysis', 20, yPos);
      yPos += 10;

      // Progress Tracking
      doc.setFontSize(16);
      doc.text('Progress Over Time', 20, yPos);
      yPos += 10;

      // Save the PDF
      doc.save('academic-report.pdf');

      setSuccess('Report generated successfully');
    } catch (err) {
      console.error('Error generating report:', err);
      setError('Failed to generate report');
    } finally {
      setLoading(false);
    }
  };

  const handleSaveTemplate = async () => {
    try {
      setLoading(true);
      setError(null);

      // Save template to local storage for now
      // In production, this would save to the database
      const newTemplate: ReportTemplate = {
        id: crypto.randomUUID(),
        name: 'New Template',
        config
      };

      setTemplates([...templates, newTemplate]);
      setSuccess('Template saved successfully');
      setShowTemplateModal(false);
    } catch (err) {
      console.error('Error saving template:', err);
      setError('Failed to save template');
    } finally {
      setLoading(false);
    }
  };

  const handleLoadTemplate = (templateId: string) => {
    const template = templates.find(t => t.id === templateId);
    if (template) {
      setConfig(template.config);
      setSuccess('Template loaded successfully');
    }
  };

  const handleExport = async (format: 'pdf' | 'excel' | 'csv') => {
    try {
      setLoading(true);
      setError(null);

      // Implementation will vary based on format
      switch (format) {
        case 'pdf':
          // PDF export logic here
          break;
        case 'excel':
          // Excel export logic here
          break;
        case 'csv':
          // CSV export logic here
          break;
      }

      setSuccess(`Report exported as ${format.toUpperCase()} successfully`);
    } catch (err) {
      console.error('Error exporting report:', err);
      setError(`Failed to export report as ${format.toUpperCase()}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="sm:flex sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Academic Report Generator</h1>
          <p className="mt-1 text-sm text-gray-500">
            Generate comprehensive academic reports with custom templates
          </p>
        </div>
        <div className="mt-4 sm:mt-0 flex space-x-3">
          <Button
            variant="secondary"
            onClick={() => setShowTemplateModal(true)}
            icon={<Save className="h-4 w-4" />}
          >
            Save Template
          </Button>
          <Button
            onClick={() => handleGenerateReport()}
            loading={loading}
            icon={<FileText className="h-4 w-4" />}
          >
            Generate Report
          </Button>
        </div>
      </div>

      {error && <StatusMessage type="error" message={error} />}
      {success && <StatusMessage type="success" message={success} />}

      <Card>
        <div className="space-y-6 p-6">
          {/* Template Selection */}
          <FormField
            label="Report Template"
            htmlFor="template"
          >
            <Select
              value={selectedTemplate}
              onChange={(value) => {
                setSelectedTemplate(value);
                handleLoadTemplate(value);
              }}
              options={[
                { value: '', label: 'Select a template...' },
                ...templates.map(t => ({
                  value: t.id,
                  label: t.name
                }))
              ]}
            />
          </FormField>

          {/* Configuration Options */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Data Points */}
            <FormField
              label="Data Points"
              htmlFor="dataPoints"
            >
              <div className="space-y-2">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={config.dataPoints.includes('skills')}
                    onChange={(e) => {
                      const newDataPoints = e.target.checked
                        ? [...config.dataPoints, 'skills']
                        : config.dataPoints.filter(d => d !== 'skills');
                      setConfig({ ...config, dataPoints: newDataPoints });
                    }}
                    className="form-checkbox h-4 w-4 text-indigo-600"
                  />
                  <span className="ml-2">Lab Skills</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={config.dataPoints.includes('clinical')}
                    onChange={(e) => {
                      const newDataPoints = e.target.checked
                        ? [...config.dataPoints, 'clinical']
                        : config.dataPoints.filter(d => d !== 'clinical');
                      setConfig({ ...config, dataPoints: newDataPoints });
                    }}
                    className="form-checkbox h-4 w-4 text-indigo-600"
                  />
                  <span className="ml-2">Clinical Documentation</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={config.dataPoints.includes('submission_count')}
                    onChange={(e) => {
                      const newDataPoints = e.target.checked
                        ? [...config.dataPoints, 'submission_count']
                        : config.dataPoints.filter(d => d !== 'submission_count');
                      setConfig({ ...config, dataPoints: newDataPoints });
                    }}
                    className="form-checkbox h-4 w-4 text-indigo-600"
                  />
                  <span className="ml-2">Form Submission Count</span>
                </label>
              </div>
            </FormField>

            {/* Date Range */}
            <FormField
              label="Date Range"
              htmlFor="dateRange"
            >
              <Select
                value={config.dateRange}
                onChange={(value) => setConfig({ ...config, dateRange: value })}
                options={[
                  { value: 'all', label: 'All Time' },
                  { value: 'month', label: 'Last Month' },
                  { value: 'quarter', label: 'Last Quarter' },
                  { value: 'year', label: 'Last Year' },
                  { value: 'custom', label: 'Custom Range' }
                ]}
              />
            </FormField>
          </div>

          {/* Export Options */}
          <div className="border-t border-gray-200 pt-6">
            <h3 className="text-sm font-medium text-gray-900 mb-4">Export Options</h3>
            <div className="flex space-x-3">
              <Button
                variant="secondary"
                onClick={() => handleExport('pdf')}
                icon={<Download className="h-4 w-4" />}
              >
                Export as PDF
              </Button>
              <Button
                variant="secondary"
                onClick={() => handleExport('excel')}
                icon={<Download className="h-4 w-4" />}
              >
                Export as Excel
              </Button>
              <Button
                variant="secondary"
                onClick={() => handleExport('csv')}
                icon={<Download className="h-4 w-4" />}
              >
                Export as CSV
              </Button>
            </div>
          </div>
        </div>
      </Card>

      {/* Template Modal */}
      {showTemplateModal && (
        <Modal
          title="Save Report Template"
          onClose={() => setShowTemplateModal(false)}
        >
          <div className="space-y-6">
            <FormField
              label="Template Name"
              htmlFor="templateName"
              required
            >
              <input
                type="text"
                id="templateName"
                className="form-input block w-full rounded-md"
                placeholder="Enter template name..."
              />
            </FormField>

            <div className="flex justify-end space-x-3">
              <Button
                variant="secondary"
                onClick={() => setShowTemplateModal(false)}
              >
                Cancel
              </Button>
              <Button
                onClick={handleSaveTemplate}
                loading={loading}
              >
                Save Template
              </Button>
            </div>
          </div>
        </Modal>
      )}

      {/* Configuration Modal */}
      {showConfigModal && (
        <Modal
          title="Report Configuration"
          onClose={() => setShowConfigModal(false)}
        >
          <div className="space-y-6">
            {/* Configuration options */}
            <div className="flex justify-end space-x-3">
              <Button
                variant="secondary"
                onClick={() => setShowConfigModal(false)}
              >
                Cancel
              </Button>
              <Button
                onClick={() => {
                  setShowConfigModal(false);
                  handleGenerateReport();
                }}
                loading={loading}
              >
                Generate Report
              </Button>
            </div>
          </div>
        </Modal>
      )}
    </div>
  );
}